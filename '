#pragma once

#include <memory>
#include <functional>
#include <vector>


struct EventListener {

  std::function<void()> dtor;

  ~EventListener() { this->dtor(); }
};


template <typename Arg>
struct Event {

  struct FuncPtr {
    //int prioirty;
    uint_fast64_t id;
    std::function<void(Arg&)> fn;

    bool operator==(const FuncPtr& other)
    {
      return this->id == other.id;
    }
  };

  static uint_fast64_t count;
  std::vector<FuncPtr> listeners;

  std::unique_ptr<EventListener> make_listener(std::function<void(Arg&)> lambda)
  {
    this->listeners.push_back(FuncPtr{0, lambda});
    auto listener = std::make_unique<EventListener>();
    listener->dtor = []() {}
    return listener;
  }
};
